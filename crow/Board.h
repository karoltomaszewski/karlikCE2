#pragma once

#include "FEN.h"
#include "Piece.h"
#include <vector>
#include "Move.h"

namespace board {
	class Field {
	public:
		Field() = default;
		Field(int x, int y);
		bool isFieldEmpty;
		void setPiece(pieces::Piece piece);
		pieces::Piece getPiece();
		int x;
		int y;
		char pieceName;
	private:
		pieces::Piece piece;

	};

	class Board {
	public:
		Board() = default;
		Board(FEN::FEN fen);
		Board(const board::Board& board) {
			fields = board.fields;
			fen = board.fen;
			colorOnMove = board.colorOnMove;
			canWhiteKingCastle = board.canWhiteKingCastle;
			canWhiteQueenCastle = board.canWhiteQueenCastle;
			canBlackKingCastle = board.canBlackKingCastle;
			canBlackQueenCastle = board.canBlackQueenCastle;
			canEnPassant = board.canEnPassant;
			enPassantX = board.enPassantX;
			enPassantY = board.enPassantY;

			whiteKingX = board.whiteKingX;
			whiteKingY = board.whiteKingY;
			blackKingX = board.blackKingX;
			blackKingY = board.blackKingY;
		}
		std::vector<Field> fields;
		bool isFieldEmpty(int x, int y);
		bool isFieldOccupiedByOpponentsPiece(int x, int y);
		bool canCaptureOnField(int x, int y);
		FEN::FEN fen;
		void makeMove(move::Move*);
		double evaluate(std::string originalColor, move::Move* lastMove);
		double calculateMoveExtraBonus( move::Move* lastMove);
		bool isFieldValid(int x, int y);
		std::string colorOnMove;
		board::Field getField(int x, int y);
		std::string getPosition();

		static int calculateIndex(int x, int y);

		bool canWhiteKingCastle;
		bool canWhiteQueenCastle;
		bool canBlackKingCastle;
		bool canBlackQueenCastle;

		int whiteKingX;
		int whiteKingY;
		int blackKingX;
		int blackKingY;

		bool canEnPassant;
		int enPassantX;
		int enPassantY;

		double pawnTable[64] = {
			 0,   0,   0,   0,   0,   0,  0,   0,
			 0.98, 1.34,  0.61,  0.95,  0.68, 1.26, 0.34, -0.11,
			 -0.06,   0.07,  0.26,  0.31,  0.65,  0.56, 0.25, -0.2,
			-0.14,  0.13,   0.06,  0.21,  0.23,  0.12, 0.17, -0.23,
			-0.27,  -0.02,  -0.05,  0.12,  0.17,   0.06, 0.1, -0.25,
			-0.26,  -0.04,  -0.04, -0.1,   0.03,   0.03, 0.33, -0.12,
			-0.35,  -0.01, -0.20, -0.23, -0.15,  0.24, 0.38, -0.22,
			  0,   0,   0,   0,   0,   0,  0,   0,
		};

		double egPawnTable[64] = {
			 0,   0,   0,   0,   0,   0,   0,   0,
			1.78, 1.73, 1.58, 1.34, 1.47, 1.32, 1.65, 1.87,
			 0.94, 1,  0.85,  0.67,  0.56,  0.53,  0.82,  0.84,
			 0.32,  0.24,  0.13,  0.05,  -0.02,   0.04,  0.17,  0.17,
			 0.13,   0.09,  -0.03,  -0.07,  -0.07,  -0.08,   0.03,  -0.01,
			  0.04,   0.07,  -0.06,   0.01,   0,  -0.05,  -0.01,  -0.08,
			 0.13,   0.08,   0.08,  0.1,  0.13,   0,   0.02,  -0.07,
			  0,   0,   0,   0,   0,   0,   0,   0,
		};

		double knightTable[64] = {
			-0.58, -0.38, -0.13, -0.28, -0.31, -0.27, -0.63, -0.99,
			-0.25,  -0.08, -0.25,  -0.02,  -0.09, -0.25, -0.24, -0.52,
			-0.24, -0.2,  0.1,   0.09,  -0.01,  -0.09, -0.19, -0.41,
			-0.17,   -0.03,  0.22,  0.22,  0.22,  0.11,   0.08, -0.18,
			-0.18,  -0.06,  0.16,  0.25,  0.16,  0.17,   0.04, -0.18,
			-0.23,  -0.03,  -0.01,  0.15,  0.1,  -0.03, -0.2, -0.22,
			-0.42, -0.2, -0.1,  -0.05,  -0.02, -0.2, -0.23, -0.44,
			-0.29, -0.21, -0.23, -0.15, -0.22, -0.18, -0.20, -0.64,
		};

		double egKnightTable[64] = {
			-0.58, -0.38, -0.13, -0.28, -0.31, -0.27, -0.63, -0.99,
			-0.25,  -0.08, -0.25,  -0.02,  -0.09, -0.25, -0.24, -0.52,
			-0.24, -0.2,  0.1,   0.09,  -0.01,  -0.09, -0.19, -0.41,
			-0.17,   0.03,  0.22,  0.22,  0.22,  0.11,   0.08, -0.18,
			-0.18,  -0.06,  0.16,  0.25,  0.16,  0.17,   0.04, -0.18,
			-0.23,  -0.03,  -0.01,  0.15,  0.1,  -0.03, -0.2, -0.22,
			-0.42, -0.2, -0.1,  -0.05,  -0.02, -0.2, -0.23, -0.44,
			-0.29, -0.51, -0.23, -0.15, -0.22, -0.18, -0.5, -0.64,
		};

		double bishopTable[64] = {
			-0.29, 0.04, -0.82, -0.37, -0.25, -0.42,   0.07,  -0.08,
			-0.26,  0.16, -0.18, -0.13,  0.3,  0.59,  0.18, -0.47,
			-0.16,  0.37,  0.43,  0.4,  0.35,  0.5,  0.37,  -0.02,
			-0.04,   0.05,  0.19,  0.5,  0.37,  0.37,   0.07,  -0.02,
			-0.06,  0.13,  0.13,  0.26,  0.34,  0.12,  0.10,   0.04,
			0,  0.15,  0.15,  0.15,  0.14,  0.27,  0.18,  0.10,
			0.04,  0.15,  0.16,   0,   0.07,  0.21,  0.33,   0.01,
			-0.33,  -0.03, -0.14, -0.21, -0.13, -0.12, -0.39, -0.21,
		};

		double egBishopTable[64] = {
			-0.14, -0.21, -0.11, -0.08, -0.07, -0.09, -0.17, -0.24,
			-0.08, -0.04, 0.07, -0.12, -0.03, -0.13, -0.04, -0.14,
			0.02, -0.08, 0, -0.01, -0.02, 0.06, 0, 0.04,
			-0.03, 0.09, 0.12, 0.09, 0.14, 0.1, 0.03, 0.02,
			-0.06, 0.03, 0.13, 0.19, 0.07, 0.1, -0.03, -0.09,
			-0.12, -0.03, 0.08, 0.1, 0.13, 0.03, -0.07, -0.15,
			-0.14, -0.18, -0.07, -0.01, 0.04, -0.09, -0.15, -0.27,
			-0.23, -0.09, -0.23, -0.05, -0.09, -0.16, -0.05, -0.17,
		};

		double rookTable[64] = {
			0.32,  0.42,  0.32,  0.51, 0.63,  0.09,  0.31,  0.43,
			 0.27,  0.32,  0.58,  0.62, 0.80, 0.67,  0.26, 0.44,
			 -0.05,  0.19,  0.26,  0.36, 0.17, 0.45,  0.61,  0.16,
			-0.24, -0.11,   0.07,  0.26, 0.24, 0.35,  -0.08, -0.2,
			-0.36, -0.26, -0.12,  -0.01,  0.09, -0.07,   0.06, -0.23,
			-0.45, -0.25, -0.16, -0.17,  0.03,  0,  -0.05, -0.33,
			-0.44, -0.16, -0.20,  -0.09, -0.01, 0.11,  -0.06, -0.71,
			-0.19, -0.13,   0.01,  0.17, 0.16,  0.07, -0.37, -0.26,
		};

		double egRookTable[64] = {
			0.13, 0.1, 0.18, 0.15, 0.12,  0.12,   0.08,   0.05,
			0.11, 0.13, 0.13, 0.11, -0.03,   0.03,   0.08,   0.03,
			 0.07, 0.07,  0.07,  0.05,  0.04,  -0.03,  -0.05,  -0.03,
			 0.04,  0.03, 0.13,  0.01,  0.02,   0.01,  -0.01,   0.02,
			 0.03,  0.05,  0.08,  0.04, -0.05,  -0.06,  -0.08, -0.11,
			-0.04,  0, -0.05, -0.01, -0.07, -0.12,  -0.08, -0.16,
			-0.06, -0.06,  0,  0.02, -0.09,  -0.09, -0.11,  -0.03,
			-0.09,  0.02,  0.03, -0.01, -0.05, -0.13,   0.04, -0.2,
		};

		double queenTable[64] = {
			-0.28, 0, 0.29, 0.12, 0.59, 0.44, 0.43, 0.45,
			-0.24, -0.39, -0.05, 0.01, -0.16, 0.57, 0.28, 0.54,
			-0.13, -0.17, 0.07, 0.08, 0.29, 0.56, 0.47, 0.57,
			-0.27, -0.27, -0.16, -0.16, -0.01, 0.17, -0.02, 0.01,
			-0.09, -0.26, -0.09, -0.1, -0.02, -0.04, 0.03, -0.03,
			-0.14, 0.02, -0.11, -0.02, -0.05, 0.02, 0.14, 0.05,
			-0.35, -0.08, 0.11, 0.02, 0.08, 0.15, -0.03, 0.01,
			-0.01, -0.18, -0.09, 0.1, -0.15, -0.25, -0.31, -0.5,
		};

		double egQueenTable[64] = {
			-0.09,  0.22, 0.22,  0.27,  0.27,  0.19,  0.1,  0.2,
			-0.17,  0.2,  0.32,  0.41,  0.58,  0.25,  0.3,   0,
			-0.2,   0.06,   0.09,  0.49,  0.47,  0.35,  0.19,   0.09,
			  0.03,  0.22,  0.24,  0.45,  0.57,  0.4,  0.57,  0.36,
			-0.18,  0.28,  0.19,  0.47,  0.31,  0.34,  0.39,  0.23,
			-0.16, -0.27,  0.15,   0.06,   0.09,  0.17,  0.1,   0.05,
			-0.22, -0.23, -0.30, -0.16, -0.16, -0.23, -0.36, -0.32,
			-0.33, -0.28, -0.22, -0.43,  -0.05, -0.32, -0.2, -0.41,
		};

		double kingTable[64] = {
			-0.65,  0.23,  0.16, -0.15, -0.56, -0.34,   0.02,  0.13,
			 0.29,  -0.01, -0.2,  -0.07,  -0.08,  -0.04, -0.38, -0.29,
			 -0.09,  0.24,   0.02, -0.16, -0.2,   0.06,  0.22, -0.22,
			-0.17, -0.2, -0.12, -0.27, -0.3, -0.25, -0.14, -0.36,
			-0.49,  -0.01, -0.27, -0.39, -0.46, -0.44, -0.33, -0.51,
			-0.14, -0.14, -0.22, -0.46, -0.44, -0.3, -0.15, -0.27,
			  0.01,   0.07,  -0.08, -0.64, -0.43, -0.16,   0.09,   0.08,
			-0.15,  0.36,  0.12, -0.54,  0.08, -0.28,  0.24,  0.14,
		};

		double egKingTable[64] = {
			-0.74, -0.35, -0.18, -0.18, -0.11,  0.15,   0.04, -0.17,
			-0.12,  0.17,  0.14,  0.17,  0.17,  0.38,  0.23, 0.11,
			 0.1,  0.17,  0.23,  0.15,  0.20,  0.45,  0.44,  0.13,
			 -0.08,  0.22,  0.24,  0.27,  0.26,  0.33,  0.26,  0.03,
			-0.18,  -0.04,  0.21,  0.24,  0.27,  0.23,   0.09, -0.11,
			-0.19,  -0.03,  0.11,  0.21,  0.23,  0.16,   0.07,  -0.09,
			-0.27, -0.11,   0.04,  0.13,  0.14,   0.04,  -0.05, -0.17,
			-0.53, -0.34, -0.21, -0.11, -0.28, -0.14, -0.24, -0.43
		};
	private:
		void generateFields();
	};
}